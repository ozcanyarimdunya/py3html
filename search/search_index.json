{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"py3html A very simple tool to generate html with python code. Project Tabler Author \u00d6zcan Yar\u0131md\u00fcnya Documentation https://ozcanyarimdunya.github.io/py3html Source code https://github.com/ozcanyarimdunya/py3html py3html is a library that you can generate html by using same tree-structure python code. Installation Only python3.9+ required, no extra dependencies. pip install py3html Usage Basic usage import py3html as ph code = ph.p(\"Hello, World\") code.html Output <p>Hello, World</p> You can add more elements with attributes. import py3html as ph code = ph.div( ph.h1(\"Welcome\", style=\"color: red\"), ph.a(\"Click here!\", href=\"example.com\"), ph.p( \"Login \", ph.small(\"to\"), \" continue!\", ), class_=\"container\" ) code.html Output <div class=\"container\"> <h1 style=\"color: red\">Welcome</h1> <a href=\"example.com\">Click here!</a> <p>Login <small>to</small> continue!</p> </div> Test This project using pytest . make test Documentation Live preview make serve-docs Building build-docs LICENSE MIT License Copyright (c) 2023 yarimdunya.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"py3html"},{"location":"#py3html","text":"A very simple tool to generate html with python code. Project Tabler Author \u00d6zcan Yar\u0131md\u00fcnya Documentation https://ozcanyarimdunya.github.io/py3html Source code https://github.com/ozcanyarimdunya/py3html py3html is a library that you can generate html by using same tree-structure python code.","title":"py3html"},{"location":"#installation","text":"Only python3.9+ required, no extra dependencies. pip install py3html","title":"Installation"},{"location":"#usage","text":"Basic usage import py3html as ph code = ph.p(\"Hello, World\") code.html Output <p>Hello, World</p> You can add more elements with attributes. import py3html as ph code = ph.div( ph.h1(\"Welcome\", style=\"color: red\"), ph.a(\"Click here!\", href=\"example.com\"), ph.p( \"Login \", ph.small(\"to\"), \" continue!\", ), class_=\"container\" ) code.html Output <div class=\"container\"> <h1 style=\"color: red\">Welcome</h1> <a href=\"example.com\">Click here!</a> <p>Login <small>to</small> continue!</p> </div>","title":"Usage"},{"location":"#test","text":"This project using pytest . make test","title":"Test"},{"location":"#documentation","text":"Live preview make serve-docs Building build-docs","title":"Documentation"},{"location":"#license","text":"MIT License Copyright (c) 2023 yarimdunya.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"LICENSE"},{"location":"usage/","text":"Usage py3html has very simple usage simple as html. Getting Starting After installing now import py3html . import py3html as ph Basic usage code = ph.p(\"Test\") assert code.html == \"<p>Test</p>\\n\" code = ph.br() assert code.html == \"<br />\\n\" code = ph.p(\"test\") assert str(code) == \"<p>test</p>\\n\" More complex usage code = ph.p( \"This is a \", ph.a(\"test\", href=\"test.com\"), \" code.\", ) assert code.html == textwrap.dedent('''\\ <p>This is a <a href=\"test.com\">test</a> code.</p> ''') Html escape usage code = ph.p( '<small>Escape \"it\"!</small>', ) assert code.html == textwrap.dedent(\"\"\"\\ <p>&lt;small&gt;Escape &quot;it&quot;!&lt;/small&gt;</p> \"\"\") Html unescape usage string = '<small>Escape \"it\"!</small>' code = ph.p( ph.Html(string) ) assert code.html == textwrap.dedent(\"\"\"\\ <p><small>Escape \"it\"!</small></p> \"\"\") Attributes usage code = ph.div( ph.p(\"Test\", style=\"color: red;\"), class_=\"test\", ) assert code.html == textwrap.dedent('''\\ <div class=\"test\"><p style=\"color: red;\">Test</p> </div> ''') Create dynamic content thead = ph.thead( ph.tr( ph.th(\"Id\"), ph.th(\"Name\"), ) ) body = [] for i in range(3): body.append( ph.tr( ph.td(i), ph.td(f\"Test {i}\") ) ) tbody = ph.tbody(*body) table = ph.table(thead, tbody) assert ( table.html == textwrap.dedent(\"\"\"\\ <table><thead><tr><th>Id</th> <th>Name</th> </tr> </thead> <tbody><tr><td>0</td> <td>Test 0</td> </tr> <tr><td>1</td> <td>Test 1</td> </tr> <tr><td>2</td> <td>Test 2</td> </tr> </tbody> </table> \"\"\") ) Create new element test = ph.element(tag=\"test\") code = test(\"New element!\", class_=\"test\") assert code.html == textwrap.dedent('''\\ <test class=\"test\">New element!</test> ''') Create new element with default attributes test = ph.element(tag=\"test\", class_=\"test\", style=\"background: red;\") assert test(\"Element 1!\").html == '<test class=\"test\" style=\"background: red;\">Element 1!</test>\\n' assert test(\"Element 2!\", class_=\"new\").html == '<test class=\"new\" style=\"background: red;\">Element 2!</test>\\n' assert test(\"Element 3!\", class_=None).html == '<test class style=\"background: red;\">Element 3!</test>\\n'","title":"Usage"},{"location":"usage/#usage","text":"py3html has very simple usage simple as html.","title":"Usage"},{"location":"usage/#getting-starting","text":"After installing now import py3html . import py3html as ph","title":"Getting Starting"},{"location":"usage/#basic-usage","text":"code = ph.p(\"Test\") assert code.html == \"<p>Test</p>\\n\" code = ph.br() assert code.html == \"<br />\\n\" code = ph.p(\"test\") assert str(code) == \"<p>test</p>\\n\"","title":"Basic usage"},{"location":"usage/#more-complex-usage","text":"code = ph.p( \"This is a \", ph.a(\"test\", href=\"test.com\"), \" code.\", ) assert code.html == textwrap.dedent('''\\ <p>This is a <a href=\"test.com\">test</a> code.</p> ''')","title":"More complex usage"},{"location":"usage/#html-escape-usage","text":"code = ph.p( '<small>Escape \"it\"!</small>', ) assert code.html == textwrap.dedent(\"\"\"\\ <p>&lt;small&gt;Escape &quot;it&quot;!&lt;/small&gt;</p> \"\"\")","title":"Html escape usage"},{"location":"usage/#html-unescape-usage","text":"string = '<small>Escape \"it\"!</small>' code = ph.p( ph.Html(string) ) assert code.html == textwrap.dedent(\"\"\"\\ <p><small>Escape \"it\"!</small></p> \"\"\")","title":"Html unescape usage"},{"location":"usage/#attributes-usage","text":"code = ph.div( ph.p(\"Test\", style=\"color: red;\"), class_=\"test\", ) assert code.html == textwrap.dedent('''\\ <div class=\"test\"><p style=\"color: red;\">Test</p> </div> ''')","title":"Attributes usage"},{"location":"usage/#create-dynamic-content","text":"thead = ph.thead( ph.tr( ph.th(\"Id\"), ph.th(\"Name\"), ) ) body = [] for i in range(3): body.append( ph.tr( ph.td(i), ph.td(f\"Test {i}\") ) ) tbody = ph.tbody(*body) table = ph.table(thead, tbody) assert ( table.html == textwrap.dedent(\"\"\"\\ <table><thead><tr><th>Id</th> <th>Name</th> </tr> </thead> <tbody><tr><td>0</td> <td>Test 0</td> </tr> <tr><td>1</td> <td>Test 1</td> </tr> <tr><td>2</td> <td>Test 2</td> </tr> </tbody> </table> \"\"\") )","title":"Create dynamic content"},{"location":"usage/#create-new-element","text":"test = ph.element(tag=\"test\") code = test(\"New element!\", class_=\"test\") assert code.html == textwrap.dedent('''\\ <test class=\"test\">New element!</test> ''')","title":"Create new element"},{"location":"usage/#create-new-element-with-default-attributes","text":"test = ph.element(tag=\"test\", class_=\"test\", style=\"background: red;\") assert test(\"Element 1!\").html == '<test class=\"test\" style=\"background: red;\">Element 1!</test>\\n' assert test(\"Element 2!\", class_=\"new\").html == '<test class=\"new\" style=\"background: red;\">Element 2!</test>\\n' assert test(\"Element 3!\", class_=None).html == '<test class style=\"background: red;\">Element 3!</test>\\n'","title":"Create new element with default attributes"}]}